# Node.js with React
# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript



trigger:
  branches:
    include:
      - development
      - release/v1.0.0

resources:
- repo: self

variables: 
  ## Add this under variables section in the pipeline
  azureSubscription: <Name of the Azure subscription>
  appName-dev: <Name of the Dev-Web App>
  appName-QA: <Name of the QA-Web App>
  appName-Prod: <Name of the Prod-Web App>
  containerRegistry: <Name of the Azure container registry>
  imageRepository: <Name of image repository>
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile.frontend'
  tag: '$(Build.BuildId)'

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Build
    displayName: Build frontend app
    jobs:
      - job: Build
        displayName: Build
        steps:
          - bash: |
              env | sort
          - checkout: self
          - task: NodeTool@0
            inputs:
              versionSpec: '10.x'
            displayName: 'Install Node.js'
          - script: |
              cd $(Build.SourcesDirectory)
              npm install
              npm run build
            displayName: 'npm install and build'
            workingDirectory: $(Build.SourcesDirectory)
          - script: |
              cd $(Build.SourcesDirectory)
              npm test
            displayName: 'npm test'
            workingDirectory: $(Build.SourcesDirectory)
          - task: PublishTestResults@2
            displayName: 'Test Results'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '$(Build.SourcesDirectory)/**/test-*.xml'
              failTaskOnFailedTests: true
          - task: Docker@2
            inputs:
                containerRegistry: $(ACR-for-the-app-deployment)
                command: 'login'
          - task: Docker@2
            displayName: Build and push an image
            inputs:
              repository: 'react-frontend'
              command: 'buildAndPush'
              Dockerfile: $(dockerfilePath-frontend)
              buildContext: '$(Build.SourcesDirectory)'
              tags: |
                $(tag)
                latest
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)'
              Contents: '**/*.yaml'
              TargetFolder: '$(Build.ArtifactStagingDirectory)'
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'

  - stage: Release_to_dev_env
    displayName: Release to dev-env
    jobs:
    - deployment: Release
      displayName: 'Release to dev-env'
      environment: dev-env
      pool:
        vmImage: ubuntu-latest
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
            - task: AzureWebAppContainer@1
              displayName: 'Azure Web App on Container Deploy to Dev'
              inputs:
                azureSubscription: $(azureSubscription)
                appName: $(appName-dev)
                containers: $(containerRegistry)/$(imageRepository):$(tag)

  - stage: Release_to_QA_env
    displayName: Release to QA-env
    jobs:
    - deployment: Release
      displayName: 'Release to QA-env'
      environment: QA-env
      pool:
        vmImage: ubuntu-latest
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
            - task: AzureWebAppContainer@1
              displayName: 'Azure Web App on Container Deploy to QA'
              inputs:
                azureSubscription: $(azureSubscription)
                appName: $(appName-QA)
                containers: $(containerRegistry)/$(imageRepository):$(tag)

  - stage: Release_to_Prod
    displayName: Release to Prod
    jobs:
    - deployment: Release
      displayName: 'Release to Prod'
      environment: Prod
      pool:
        vmImage: ubuntu-latest
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
            - task: AzureWebAppContainer@1
              displayName: 'Azure Web App on Container Deploy to Prod'
              inputs:
                azureSubscription: $(azureSubscription)
                appName: $(appName-Prod)
                containers: $(containerRegistry)/$(imageRepository):$(tag)